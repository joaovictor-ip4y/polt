name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      - name: Install dependencies
        run: composer install

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: composer install --no-dev --prefer-dist

      - name: Run Security Check
        run: |
          curl -Ls https://github.com/fabpot/local-php-security-checker/releases/latest/download/local-php-security-checker_linux_amd64 -o local-php-security-checker
          chmod +x local-php-security-checker
          ./local-php-security-checker

  tests:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run PHPUnit tests with coverage
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=junit.xml

      - name: Extract coverage
        id: coverage_check
        run: |
          COVERAGE=$(php -r "
              libxml_use_internal_errors(true);
              \$xml = simplexml_load_file('coverage.xml');
              if (!\$xml || !isset(\$xml->project->metrics['coveredelements']) || !isset(\$xml->project->metrics['elements']) || \$xml->project->metrics['elements'] == 0) {
                  echo '0';
              } else {
                  echo round((\$xml->project->metrics['coveredelements'] / \$xml->project->metrics['elements']) * 100, 2);
              }
          ")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Cobertura calculada: $COVERAGE%"

      - name: Parse junit.xml
        id: parse_junit
        run: |
          TESTS=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) (\$xml ? \$xml->testsuite['tests'] : 0);
          ")
          FAILURES=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) (\$xml ? \$xml->testsuite['failures'] : 0);
          ")
          SKIPPED=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (int) (\$xml ? \$xml->testsuite['skipped'] : 0);
          ")
          TIME=$(php -r "
              \$xml = simplexml_load_file('junit.xml');
              echo (float) (\$xml ? \$xml->testsuite['time'] : 0);
          ")

          echo "total_tests=$TESTS" >> $GITHUB_ENV
          echo "failures=$FAILURES" >> $GITHUB_ENV
          echo "skipped=$SKIPPED" >> $GITHUB_ENV
          echo "execution_time=$TIME" >> $GITHUB_ENV

      - name: Post test results
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### PHPUnit Test Coverage Report

            - Total Coverage: ${{ env.COVERAGE }}%
            - Total Tests: ${{ env.total_tests }}
            - Failures: ${{ env.failures }}
            - Skipped: ${{ env.skipped }}
            - Execution Time: ${{ env.execution_time }} seconds

      - name: Validate test failures
        if: success() || failure()
        run: |
          if [ ${{ env.failures }} -gt 0 ]; then
              echo "Existem falhas nos testes: ${{ env.failures }}"
              exit 1
          fi

  cd:
    name: Continuous Delivery
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t my-php-app .

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and Push Docker image
        run: |
          docker tag my-php-app ${{ secrets.DOCKER_USERNAME }}/my-php-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-php-app:latest

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /caminho/do/projeto/no/servidor
            git pull origin main
            composer install --no-dev --optimize-autoloader
            docker-compose down
            docker-compose up -d --build
          EOF
