name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      - name: Install dependencies
        run: composer install

      - name: Run tests with coverage
        run: |
          mkdir -p build/logs
          vendor/bin/phpunit --coverage-clover build/logs/clover.xml

      - name: Debug coverage file
        run: cat build/logs/clover.xml || echo "Arquivo clover.xml nÃ£o encontrado ou estÃ¡ vazio."

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/logs/clover.xml
          flags: unittests
          name: code-coverage-report
          fail_ci_if_error: true
          verbose: true

      - name: Post Codecov results as a comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const codecovUrl = `https://app.codecov.io/gh/${context.repo.owner}/${context.repo.repo}`;
            const commentBody = `### ðŸ“Š Code Coverage Report  
            âœ… RelatÃ³rio de cobertura disponÃ­vel em: [Codecov](${codecovUrl})`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  cd:
    name: Continuous Delivery
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t my-php-app .

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and Push Docker image
        run: |
          docker tag my-php-app ${{ secrets.DOCKER_USERNAME }}/my-php-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-php-app:latest

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /caminho/do/projeto/no/servidor
            git pull origin main
            composer install --no-dev --optimize-autoloader
            docker-compose down
            docker-compose up -d --build
          EOF
